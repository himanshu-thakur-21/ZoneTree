@page "/fetchdata"

@using ZoneTree.Blazor.Common.Domain.Models;
@using ZoneTree.Blazor.Common.Domain.Services;
@using ZoneTree.Blazor.Common.Infrastructure.Helpers;

@inject HttpClient Http
@inject ICacheService<List<ApiResponse>> CacheService;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private List<ApiResponse> apiResponses;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        apiResponses = await GetGithubCommits();
    }

    private async Task<List<ApiResponse>> GetGithubCommits()
    {
        string key = $"{nameof(FetchData)}_{nameof(GetGithubCommits)}";
        if (CacheService.Exists(key))
            return CacheService.Get(key);

        var (isSuccess, response) = await HttpHelper.GetTAsync<List<ApiResponse>>();
        if (!isSuccess || response == null)
            return new List<ApiResponse>();

        CacheService.Set(key, response);
        return response;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
